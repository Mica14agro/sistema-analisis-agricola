import streamlit as st
import pandas as pd
import numpy as np
import time
import json
import re
import requests
import zipfile
from io import BytesIO
import random
import matplotlib.pyplot as plt
import base64

# Configuraci칩n de la p치gina - DEBE SER LO PRIMERO DESPU칄S DE IMPORTAR STREAMLIT
st.set_page_config(
    page_title="Consulta RENSPA - SENASA",
    page_icon="游꺔",
    layout="wide"
)

# Intentar importar folium y streamlit_folium
try:
    import folium
    from folium.plugins import MeasureControl, MiniMap, MarkerCluster
    from streamlit_folium import folium_static
    folium_disponible = True
except ImportError:
    folium_disponible = False
    st.warning("Para visualizar mapas, instale folium y streamlit-folium")

# Configuraciones globales
API_BASE_URL = "https://aps.senasa.gob.ar/restapiprod/servicios/renspa"
TIEMPO_ESPERA = 0.5  # Pausa entre peticiones para no sobrecargar la API

# Estado de la aplicaci칩n
if 'poligonos_gee' not in st.session_state:
    st.session_state.poligonos_gee = []
if 'df_renspa' not in st.session_state:
    st.session_state.df_renspa = pd.DataFrame()
if 'cuit_actual' not in st.session_state:
    st.session_state.cuit_actual = ""
if 'analisis_cultivos' not in st.session_state:
    st.session_state.analisis_cultivos = False
if 'cultivos_por_poligono' not in st.session_state:
    st.session_state.cultivos_por_poligono = {}
if 'campana_seleccionada' not in st.session_state:
    st.session_state.campana_seleccionada = "Campa침a 2020-2021"

# Funci칩n para normalizar CUIT
def normalizar_cuit(cuit):
    """Normaliza un CUIT a formato XX-XXXXXXXX-X"""
    cuit_limpio = cuit.replace("-", "")
    if len(cuit_limpio) != 11:
        raise ValueError(f"CUIT inv치lido: {cuit}. Debe tener 11 d칤gitos.")
    return f"{cuit_limpio[:2]}-{cuit_limpio[2:10]}-{cuit_limpio[10]}"

# Funci칩n para obtener RENSPA por CUIT
def obtener_renspa_por_cuit(cuit):
    """Obtiene todos los RENSPA asociados a un CUIT, manejando la paginaci칩n"""
    try:
        url_base = f"{API_BASE_URL}/consultaPorCuit"
        todos_renspa = []
        offset = 0
        limit = 10  # La API usa un l칤mite de 10 por p치gina
        has_more = True
        
        while has_more:
            url = f"{url_base}?cuit={cuit}&offset={offset}"
            try:
                response = requests.get(url, timeout=15)
                response.raise_for_status()
                resultado = response.json()
                
                if 'items' in resultado and resultado['items']:
                    todos_renspa.extend(resultado['items'])
                    has_more = resultado.get('hasMore', False)
                    offset += limit
                else:
                    has_more = False
            except Exception as e:
                st.error(f"Error consultando la API: {str(e)}")
                has_more = False
                
            time.sleep(TIEMPO_ESPERA)
        return todos_renspa
    except Exception as e:
        st.error(f"Error al obtener RENSPA: {str(e)}")
        return []

# Funci칩n para normalizar RENSPA
def normalizar_renspa(renspa):
    """Normaliza un RENSPA al formato ##.###.#.#####/##"""
    renspa_limpio = renspa.strip()
    
    if re.match(r'^\d{2}\.\d{3}\.\d\.\d{5}/\d{2}$', renspa_limpio):
        return renspa_limpio
    
    if re.match(r'^\d{13}$', renspa_limpio):
        return f"{renspa_limpio[0:2]}.{renspa_limpio[2:5]}.{renspa_limpio[5:6]}.{renspa_limpio[6:11]}/{renspa_limpio[11:13]}"
    
    raise ValueError(f"Formato de RENSPA inv치lido: {renspa}")

# Funci칩n para consultar detalles de un RENSPA
def consultar_renspa_detalle(renspa):
    """Consulta los detalles de un RENSPA espec칤fico para obtener el pol칤gono"""
    try:
        url = f"{API_BASE_URL}/consultaPorNumero?numero={renspa}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        return data
    except Exception as e:
        st.error(f"Error consultando {renspa}: {e}")
        return None

# Funci칩n para extraer coordenadas de un pol칤gono
def extraer_coordenadas(poligono_str):
    """Extrae coordenadas de un string de pol칤gono en el formato de SENASA"""
    if not poligono_str or not isinstance(poligono_str, str):
        return None
    
    coord_pattern = r'\(([-\d\.]+),([-\d\.]+)\)'
    coord_pairs = re.findall(coord_pattern, poligono_str)
    
    if not coord_pairs:
        return None
    
    coords_geojson = []
    for lat_str, lon_str in coord_pairs:
        try:
            lat = float(lat_str)
            lon = float(lon_str)
            coords_geojson.append([lon, lat])  # GeoJSON usa [lon, lat]
        except ValueError:
            continue
    
    if len(coords_geojson) >= 3:
        if coords_geojson[0] != coords_geojson[-1]:
            coords_geojson.append(coords_geojson[0])  # Cerrar el pol칤gono
        return coords_geojson
    
    return None

# Funci칩n para simular la consulta a Google Earth Engine
def consultar_gee_cultivos(poligonos, campana):
    """
    Simula una consulta a Google Earth Engine para obtener cultivos.
    En una implementaci칩n real, esta funci칩n enviar칤a los pol칤gonos a GEE 
    y recibir칤a los resultados del an치lisis de cultivos.
    
    Args:
        poligonos: Lista de diccionarios con los pol칤gonos
        campana: Cadena con la campa침a seleccionada (ej: "Campa침a 2020-2021")
        
    Returns:
        Diccionario con clasificaci칩n de cultivos por pol칤gono
    """
    # Simulamos una respuesta de GEE
    cultivos_por_poligono = {}
    
    # Extraer a침o de la campa침a
    year_match = re.search(r'(\d{4})-(\d{4})', campana)
    year1, year2 = 2020, 2021
    if year_match:
        year1, year2 = int(year_match.group(1)), int(year_match.group(2))
    
    # Lista de cultivos posibles seg칰n la campa침a
    cultivos_base = ['Ma칤z', 'Soja 1ra', 'CI-Soja 2da', 'CI-Ma칤z 2da', 'No agr칤cola']
    
    # A침adir cultivos adicionales seg칰n la campa침a
    if year1 >= 2021:
        cultivos_base.extend(['Girasol', 'Arroz'])
    if year1 >= 2022:
        cultivos_base.extend(['Sorgo GR', 'Algod칩n'])
    
    # Configuraci칩n por campa침a
    porcentaje_agricola = {
        "Campa침a 2019-2020": 0.22,  # 22% agr칤cola, 78% no agr칤cola
        "Campa침a 2020-2021": 0.35,  # 35% agr칤cola, 65% no agr칤cola
        "Campa침a 2021-2022": 0.45,  # 45% agr칤cola, 55% no agr칤cola
        "Campa침a 2022-2023": 0.38,  # 38% agr칤cola, 62% no agr칤cola
        "Campa침a 2023-2024": 0.41,  # 41% agr칤cola, 59% no agr칤cola
    }
    
    # Para cada pol칤gono, generar una clasificaci칩n simulada
    for pol in poligonos:
        renspa = pol['renspa']
        superficie = pol.get('superficie', 100)
        cultivos_por_poligono[renspa] = []
        
        # Si no hay datos para la campa침a, usar el promedio
        porc_agricola = porcentaje_agricola.get(campana, 0.35)
        
        # Determinar la superficie agr칤cola total
        superficie_agricola = superficie * porc_agricola
        superficie_no_agricola = superficie - superficie_agricola
        
        # A침adir "No agr칤cola"
        cultivos_por_poligono[renspa].append({
            'cultivo': 'No agr칤cola',
            'area': superficie_no_agricola,
            'porcentaje': round((superficie_no_agricola / superficie) * 100, 1)
        })
        
        # Distribuir el 치rea agr칤cola entre los cultivos
        cultivos_agricolas = [c for c in cultivos_base if c != 'No agr칤cola']
        num_cultivos = min(3, len(cultivos_agricolas))  # M치ximo 3 cultivos por pol칤gono
        
        # Seleccionar cultivos para este pol칤gono (seed con RENSPA para consistencia)
        random.seed(hash(renspa) % 10000)
        cultivos_seleccionados = random.sample(cultivos_agricolas, num_cultivos)
        
        # Distribuir superficie entre los cultivos seleccionados
        # Mayor superficie para el primer cultivo, menor para los siguientes
        pesos = [0.6, 0.3, 0.1][:num_cultivos]
        pesos = [p / sum(pesos) for p in pesos]
        
        for i, cultivo in enumerate(cultivos_seleccionados):
            area = superficie_agricola * pesos[i]
            porcentaje = round((area / superficie) * 100, 1)
            
            cultivos_por_poligono[renspa].append({
                'cultivo': cultivo,
                'area': area,
                'porcentaje': porcentaje
            })
    
    # Simular tiempo de procesamiento en GEE (2-3 segundos)
    time.sleep(2)
    
    return cultivos_por_poligono

# Funci칩n para generar un mapa con visualizaci칩n de cultivos
def crear_mapa_cultivos(poligonos, cultivos_por_poligono, campana):
    """
    Crea un mapa folium con visualizaci칩n de cultivos por pol칤gono
    
    Args:
        poligonos: Lista de diccionarios con los datos de pol칤gonos
        cultivos_por_poligono: Diccionario con la clasificaci칩n de cultivos por pol칤gono
        campana: Campa침a seleccionada
        
    Returns:
        Objeto mapa de folium
    """
    if not folium_disponible:
        st.warning("Para visualizar mapas, instale folium y streamlit-folium")
        return None
    
    if not poligonos:
        return None
    
    # Determinar centro del mapa
    all_lats = []
    all_lons = []
    for pol in poligonos:
        for coord in pol['coords']:
            all_lons.append(coord[0])
            all_lats.append(coord[1])
    
    if all_lats and all_lons:
        center_lat = sum(all_lats) / len(all_lats)
        center_lon = sum(all_lons) / len(all_lons)
    else:
        # Centro predeterminado (Buenos Aires)
        center_lat = -34.603722
        center_lon = -58.381592
    
    # Crear mapa base
    m = folium.Map(location=[center_lat, center_lon], zoom_start=10)
    
    # Agregar capas base con atribuci칩n
    folium.TileLayer('https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}', 
                    name='Google Hybrid', 
                    attr='Google').add_to(m)
    folium.TileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', 
                    name='Google Satellite', 
                    attr='Google').add_to(m)
    folium.TileLayer('OpenStreetMap', name='OpenStreetMap').add_to(m)
    
    # A침adir herramienta de medici칩n
    MeasureControl(position='topright', 
                  primary_length_unit='kilometers', 
                  secondary_length_unit='miles', 
                  primary_area_unit='hectares').add_to(m)
    
    # A침adir mini mapa para ubicaci칩n
    MiniMap().add_to(m)
    
    # Diccionario de colores por cultivo (similar a la imagen de GEE)
    colores_cultivo = {
        'Ma칤z': '#0042ff',         # Azul
        'Soja 1ra': '#339820',     # Verde
        'CI-Soja 2da': '#90ee90',  # Verde claro
        'CI-Ma칤z 2da': '#87CEEB',  # Azul claro
        'Arroz': '#1d1e33',        # Azul oscuro
        'No agr칤cola': '#646b63',  # Gris
        'Girasol': '#FFFF00',      # Amarillo
        'Sorgo GR': '#FF0000',     # Rojo
        'Algod칩n': '#b7b9bd',      # Gris claro
        'Default': '#FF0000'       # Rojo (por defecto)
    }
    
    # Crear grupos de capas para organizar la visualizaci칩n
    fg_poligonos = folium.FeatureGroup(name="Pol칤gonos RENSPA").add_to(m)
    fg_cultivos = {}
    
    # Crear un grupo para cada tipo de cultivo encontrado
    cultivos_unicos = set()
    for renspa, cultivos in cultivos_por_poligono.items():
        for cultivo_info in cultivos:
            cultivos_unicos.add(cultivo_info['cultivo'])
    
    for cultivo in cultivos_unicos:
        fg_cultivos[cultivo] = folium.FeatureGroup(name=f"Cultivo: {cultivo}").add_to(m)
    
    # A침adir cada pol칤gono al mapa con su clasificaci칩n de cultivos
    for pol in poligonos:
        renspa = pol['renspa']
        
        # Informaci칩n b치sica del pol칤gono para popup
        popup_html = f"""
        <div style="width:250px;">
            <h4>RENSPA: {renspa}</h4>
            <p><b>Titular:</b> {pol.get('titular', 'No disponible')}</p>
            <p><b>Localidad:</b> {pol.get('localidad', 'No disponible')}</p>
            <p><b>Superficie:</b> {pol.get('superficie', 0)} ha</p>
        """
        
        # Agregar informaci칩n de cultivos al popup
        if renspa in cultivos_por_poligono:
            popup_html += f"<h4>Clasificaci칩n ({campana.replace('Campa침a ', '')}):</h4><ul>"
            
            for cultivo_info in cultivos_por_poligono[renspa]:
                cultivo = cultivo_info['cultivo']
                porcentaje = cultivo_info['porcentaje']
                area = cultivo_info['area']
                
                # Obtener color del cultivo
                color = colores_cultivo.get(cultivo, colores_cultivo['Default'])
                
                popup_html += f"""
                <li style="display:flex;align-items:center;margin-bottom:5px;">
                    <div style="width:15px;height:15px;background-color:{color};margin-right:5px;"></div>
                    {cultivo}: {area:.1f} ha ({porcentaje}%)
                </li>
                """
            
            popup_html += "</ul>"
        
        popup_html += "</div>"
        
        # A침adir borde del pol칤gono (치rea total)
        folium.Polygon(
            locations=[[coord[1], coord[0]] for coord in pol['coords']],  # Invertir coordenadas para folium
            color='red',
            weight=2,
            fill=False,
            tooltip=f"RENSPA: {renspa}",
            popup=folium.Popup(popup_html, max_width=300)
        ).add_to(fg_poligonos)
        
        # Si hay datos de cultivos, visualizar subdivisiones de cultivos
        if renspa in cultivos_por_poligono:
            # Obtener el centro aproximado del pol칤gono
            coords = [[coord[1], coord[0]] for coord in pol['coords']]  # Invertir coordenadas para folium
            center_x = sum(c[0] for c in coords) / len(coords)
            center_y = sum(c[1] for c in coords) / len(coords)
            
            # Para cada tipo de cultivo en este pol칤gono
            porcentaje_acumulado = 0
            for cultivo_info in cultivos_por_poligono[renspa]:
                cultivo = cultivo_info['cultivo']
                porcentaje = cultivo_info['porcentaje']
                
                # Calcular el tama침o relativo basado en el porcentaje (desde el centro)
                porcentaje_escala = 1 - (porcentaje_acumulado / 100)
                porcentaje_siguiente = 1 - ((porcentaje_acumulado + porcentaje) / 100)
                
                # Crear pol칤gono desde el centro, escalado seg칰n el porcentaje
                coords_cultivo_exterior = []
                for c in coords:
                    # Acercar el punto hacia el centro seg칰n el porcentaje acumulado
                    x = center_x + porcentaje_escala * (c[0] - center_x)
                    y = center_y + porcentaje_escala * (c[1] - center_y)
                    coords_cultivo_exterior.append([x, y])
                
                coords_cultivo_interior = []
                for c in coords:
                    # Acercar el punto m치s hacia el centro para el siguiente cultivo
                    x = center_x + porcentaje_siguiente * (c[0] - center_x)
                    y = center_y + porcentaje_siguiente * (c[1] - center_y)
                    coords_cultivo_interior.append([x, y])
                
                # Obtener color del cultivo
                color = colores_cultivo.get(cultivo, colores_cultivo['Default'])
                
                # A침adir 치rea del cultivo al mapa
                folium.Polygon(
                    locations=coords_cultivo_exterior,
                    color=color,
                    weight=1,
                    fill=True,
                    fill_color=color,
                    fill_opacity=0.7,
                    tooltip=f"{cultivo}: {cultivo_info['area']:.1f} ha ({porcentaje}%)"
                ).add_to(fg_cultivos.get(cultivo, fg_poligonos))
                
                # Actualizar el porcentaje acumulado
                porcentaje_acumulado += porcentaje
    
    # A침adir control de capas
    folium.LayerControl(position='topright').add_to(m)
    
    return m

# Funci칩n para generar tabla resumen de cultivos
def generar_resumen_cultivos(poligonos, cultivos_por_poligono):
    """
    Genera un resumen de cultivos para todos los pol칤gonos
    
    Args:
        poligonos: Lista de diccionarios con los datos de pol칤gonos
        cultivos_por_poligono: Diccionario con la clasificaci칩n de cultivos por pol칤gono
        
    Returns:
        DataFrame con el resumen de cultivos
    """
    if not poligonos or not cultivos_por_poligono:
        return pd.DataFrame()
    
    # Calcular 치rea total
    superficie_total = sum(p.get('superficie', 0) for p in poligonos)
    
    # Agregar cultivos de todos los pol칤gonos
    cultivos_totales = {}
    
    for renspa, cultivos in cultivos_por_poligono.items():
        for cultivo_info in cultivos:
            cultivo = cultivo_info['cultivo']
            area = cultivo_info['area']
            
            if cultivo not in cultivos_totales:
                cultivos_totales[cultivo] = 0
            
            cultivos_totales[cultivo] += area
    
    # Crear DataFrame
    df_resumen = pd.DataFrame({
        'Cultivo': list(cultivos_totales.keys()),
        '츼rea (ha)': list(cultivos_totales.values())
    })
    
    # Calcular porcentajes
    df_resumen['Porcentaje (%)'] = (df_resumen['츼rea (ha)'] / superficie_total * 100).round(1)
    
    # Ordenar por 치rea (descendente)
    df_resumen = df_resumen.sort_values('츼rea (ha)', ascending=False)
    
    # Redondear 치reas
    df_resumen['츼rea (ha)'] = df_resumen['츼rea (ha)'].round(1)
    
    return df_resumen

# Funci칩n para crear la leyenda estilo GEE
def crear_leyenda_gee_cultivos(df_resumen, superficie_total, campana):
    """
    Crea HTML para una leyenda estilo GEE con cultivos
    
    Args:
        df_resumen: DataFrame con el resumen de cultivos
        superficie_total: Superficie total en hect치reas
        campana: Campa침a seleccionada
        
    Returns:
        HTML de la leyenda
    """
    if df_resumen.empty:
        return ""
    
    # Diccionario de colores por cultivo
    colores_cultivo = {
        'Ma칤z': '#0042ff',         # Azul
        'Soja 1ra': '#339820',     # Verde
        'CI-Soja 2da': '#90ee90',  # Verde claro
        'CI-Ma칤z 2da': '#87CEEB',  # Azul claro
        'Arroz': '#1d1e33',        # Azul oscuro
        'No agr칤cola': '#646b63',  # Gris
        'Girasol': '#FFFF00',      # Amarillo
        'Sorgo GR': '#FF0000',     # Rojo
        'Algod칩n': '#b7b9bd',      # Gris claro
        'Default': '#FF0000'       # Rojo (por defecto)
    }
    
    # Extraer a침os de la campa침a
    campana_nombre = campana.replace("Campa침a ", "")
    
    # Inicio de la leyenda
    leyenda_html = f"""
    <div style="
        position: absolute;
        bottom: 20px;
        right: 10px;
        width: 280px;
        background-color: white;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(0,0,0,0.2);
        font-family: Arial, sans-serif;
        font-size: 14px;
        z-index: 1000;
    ">
        <h4 style="margin-top: 0; margin-bottom: 10px; text-align: center; font-size: 16px;">
            {campana_nombre}
        </h4>
    """
    
    # Agregar cada cultivo
    for _, row in df_resumen.iterrows():
        cultivo = row['Cultivo']
        area = row['츼rea (ha)']
        porcentaje = row['Porcentaje (%)']
        
        # Obtener color del cultivo
        color = colores_cultivo.get(cultivo, colores_cultivo['Default'])
        
        leyenda_html += f"""
        <div style="display: flex; margin-bottom: 8px; align-items: center;">
            <div style="width: 20px; height: 20px; background-color: {color}; margin-right: 8px;"></div>
            <div style="flex-grow: 1;">{cultivo}</div>
            <div style="font-weight: bold;">{int(area)} Ha ({int(porcentaje)}%)</div>
        </div>
        """
    
    # Agregar l칤nea divisoria y total
    leyenda_html += f"""
        <div style="border-top: 1px solid #ccc; margin-top: 8px; padding-top: 8px;"></div>
        
        <div style="display: flex; align-items: center; font-weight: bold;">
            <div style="flex-grow: 1;">츼rea Total</div>
            <div>{int(superficie_total)} Ha</div>
        </div>
    </div>
    """
    
    return leyenda_html

# Funci칩n para procesar un CUIT
def procesar_cuit(cuit, solo_activos=True):
    """
    Procesa un CUIT para obtener todos sus RENSPA con pol칤gonos
    
    Args:
        cuit: CUIT a procesar
        solo_activos: Si solo se deben procesar RENSPA activos
        
    Returns:
        df_renspa: DataFrame con todos los RENSPA
        poligonos_gee: Lista de pol칤gonos extra칤dos
    """
    # Normalizar CUIT
    cuit_normalizado = normalizar_cuit(cuit)
    
    # Mostrar un indicador de procesamiento
    with st.status('Consultando RENSPA desde SENASA...', expanded=True) as status:
        # Crear barras de progreso
        progress_bar = st.progress(0)
        
        # Paso 1: Obtener todos los RENSPA para el CUIT
        status.update(label="Obteniendo listado de RENSPA...", state="running")
        progress_bar.progress(20)
        
        todos_renspa = obtener_renspa_por_cuit(cuit_normalizado)
        
        if not todos_renspa:
            status.update(label=f"No se encontraron RENSPA para el CUIT {cuit_normalizado}", state="error")
            return pd.DataFrame(), []
        
        # Crear DataFrame para mejor visualizaci칩n y manipulaci칩n
        df_renspa = pd.DataFrame(todos_renspa)
        
        # Contar RENSPA activos e inactivos
        activos = df_renspa[df_renspa['fecha_baja'].isnull()].shape[0]
        inactivos = df_renspa[~df_renspa['fecha_baja'].isnull()].shape[0]
        
        status.update(label=f"Se encontraron {len(todos_renspa)} RENSPA ({activos} activos, {inactivos} inactivos)", state="running")
        
        # Filtrar seg칰n la opci칩n seleccionada
        if solo_activos:
            renspa_a_procesar = df_renspa[df_renspa['fecha_baja'].isnull()].to_dict('records')
            status.write(f"Procesando {len(renspa_a_procesar)} RENSPA activos")
        else:
            renspa_a_procesar = todos_renspa
            status.write(f"Procesando todos los {len(renspa_a_procesar)} RENSPA")
        
        # Paso 2: Procesar los RENSPA para obtener los pol칤gonos
        status.update(label="Obteniendo informaci칩n de pol칤gonos...", state="running")
        progress_bar.progress(40)
        
        # Listas para almacenar resultados
        poligonos_gee = []
        fallidos = []
        renspa_sin_poligono = []
        
        # Procesar cada RENSPA
        for i, item in enumerate(renspa_a_procesar):
            renspa = item['renspa']
            # Actualizar progreso
            progress_percentage = 40 + (i * 40 // len(renspa_a_procesar))
            progress_bar.progress(progress_percentage)
            status.write(f"Procesando RENSPA: {renspa} ({i+1}/{len(renspa_a_procesar)})")
            
            # Verificar si ya tiene el pol칤gono en la informaci칩n b치sica
            if 'poligono' in item and item['poligono']:
                poligono_str = item['poligono']
                superficie = item.get('superficie', 0)
                
                # Extraer coordenadas
                coordenadas = extraer_coordenadas(poligono_str)
                
                if coordenadas:
                    # Crear objeto con datos del pol칤gono
                    poligono_data = {
                        'renspa': renspa,
                        'coords': coordenadas,
                        'superficie': superficie,
                        'titular': item.get('titular', ''),
                        'localidad': item.get('localidad', ''),
                        'cuit': cuit_normalizado
                    }
                    poligonos_gee.append(poligono_data)
                    continue
            
            # Si no ten칤a pol칤gono o no era v치lido, consultar m치s detalles
            resultado = consultar_renspa_detalle(renspa)
            
            if resultado and 'items' in resultado and resultado['items'] and 'poligono' in resultado['items'][0]:
                item_detalle = resultado['items'][0]
                poligono_str = item_detalle.get('poligono')
                superficie = item_detalle.get('superficie', 0)
                
                if poligono_str:
                    # Extraer coordenadas
                    coordenadas = extraer_coordenadas(poligono_str)
                    
                    if coordenadas:
                        # Crear objeto con datos del pol칤gono
                        poligono_data = {
                            'renspa': renspa,
                            'coords': coordenadas,
                            'superficie': superficie,
                            'titular': item.get('titular', ''),
                            'localidad': item.get('localidad', ''),
                            'cuit': cuit_normalizado
                        }
                        poligonos_gee.append(poligono_data)
                    else:
                        fallidos.append(renspa)
                else:
                    renspa_sin_poligono.append(renspa)
            else:
                renspa_sin_poligono.append(renspa)
            
            # Pausa breve para no sobrecargar la API
            time.sleep(TIEMPO_ESPERA)
        
        # Mostrar estad칤sticas
        total_procesados = len(renspa_a_procesar)
        total_exitosos = len(poligonos_gee)
        total_fallidos = len(fallidos)
        total_sin_poligono = len(renspa_sin_poligono)
        
        # Completar procesamiento
        status.update(label=f"Procesamiento completo. {total_exitosos} pol칤gonos obtenidos", state="complete")
        progress_bar.progress(100)
    
    return df_renspa, poligonos_gee

# Funci칩n para procesar el an치lisis de cultivos
def analizar_cultivos(poligonos, campana):
    """
    Analiza los cultivos en los pol칤gonos utilizando Google Earth Engine (simulado)
    
    Args:
        poligonos: Lista de pol칤gonos a analizar
        campana: Campa침a seleccionada
        
    Returns:
        cultivos_por_poligono: Diccionario con cultivos por pol칤gono
        df_resumen: DataFrame con resumen de cultivos
    """
    # Mostrar indicador de procesamiento
    with st.status('Analizando cultivos con Google Earth Engine...', expanded=True) as status:
        # Progreso
        progress_bar = st.progress(0)
        
        # Paso 1: Enviar pol칤gonos a GEE
        status.update(label="Enviando pol칤gonos a Google Earth Engine...", state="running")
        progress_bar.progress(30)
        
        # Paso 2: Procesar an치lisis de cultivos
        status.update(label=f"Analizando cultivos para {campana}...", state="running")
        progress_bar.progress(60)
        
        # Simular consulta a GEE
        cultivos_por_poligono = consultar_gee_cultivos(poligonos, campana)
        
        # Generar resumen de cultivos
        status.update(label="Generando resumen de cultivos...", state="running")
        progress_bar.progress(80)
        
        df_resumen = generar_resumen_cultivos(poligonos, cultivos_por_poligono)
        
        # Completar procesamiento
        status.update(label="An치lisis de cultivos completado", state="complete")
        progress_bar.progress(100)
    
    return cultivos_por_poligono, df_resumen

# Interfaz de usuario
st.title("Consulta RENSPA - SENASA & Google Earth Engine")

# Introducci칩n
st.markdown("""
Esta herramienta permite:

1. Consultar RENSPA por CUIT desde SENASA
2. Visualizar pol칤gonos de campos en mapa interactivo
3. Analizar cultivos de cada campa침a agr칤cola usando Google Earth Engine
4. Ver estad칤sticas detalladas de uso de la tierra
""")

# Formulario de consulta
st.header("Consulta por CUIT")

with st.form("consulta_cuit_form"):
    col1, col2 = st.columns([3, 1])
    
    with col1:
        cuit_input = st.text_input(
            "Ingrese el CUIT (formato: XX-XXXXXXXX-X o XXXXXXXXXXX):", 
            value="30-65425756-2"
        )
    
    with col2:
        solo_activos = st.checkbox("Solo RENSPA activos", value=True)
    
    submitted = st.form_submit_button("Consultar RENSPA")

# Procesar consulta
if submitted:
    # Limpiar estado anterior
    st.session_state.analisis_cultivos = False
    st.session_state.cultivos_por_poligono = {}
    
    try:
        # Procesar CUIT
        df_renspa, poligonos_gee = procesar_cuit(cuit_input, solo_activos)
        
        # Guardar en estado
        st.session_state.df_renspa = df_renspa
        st.session_state.poligonos_gee = poligonos_gee
        st.session_state.cuit_actual = cuit_input
        
    except Exception as e:
        st.error(f"Error durante el procesamiento: {str(e)}")

# Mostrar resultados si hay datos
if not st.session_state.df_renspa.empty:
    st.header("Resultados de la Consulta")
    
    # Mostrar tabla de RENSPA
    with st.expander("Listado de RENSPA", expanded=True):
        st.dataframe(st.session_state.df_renspa)
    
    # Mostrar mapa con pol칤gonos (si hay)
    if st.session_state.poligonos_gee and folium_disponible:
        st.header("Visualizaci칩n de Pol칤gonos")
        
        # Mostrar mapa b치sico sin an치lisis de cultivos
        if not st.session_state.analisis_cultivos:
            # Crear mapa simple
            m = folium.Map(location=[-34.603722, -58.381592], zoom_start=10)
            
            # Agregar capas base con atribuci칩n
            folium.TileLayer('https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}', 
                            name='Google Hybrid', 
                            attr='Google').add_to(m)
            folium.TileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', 
                            name='Google Satellite', 
                            attr='Google').add_to(m)
            folium.TileLayer('OpenStreetMap', name='OpenStreetMap').add_to(m)
            
            # A침adir herramienta de medici칩n
            MeasureControl(position='topright', 
                          primary_length_unit='kilometers', 
                          secondary_length_unit='miles', 
                          primary_area_unit='hectares').add_to(m)
            
            # A침adir mini mapa para ubicaci칩n
            MiniMap().add_to(m)
            
            # Determinar centro del mapa
            all_lats = []
            all_lons = []
            for pol in st.session_state.poligonos_gee:
                for coord in pol['coords']:
                    all_lons.append(coord[0])
                    all_lats.append(coord[1])
            
            if all_lats and all_lons:
                center_lat = sum(all_lats) / len(all_lats)
                center_lon = sum(all_lons) / len(all_lons)
                m.fit_bounds([[min(all_lats), min(all_lons)], [max(all_lats), max(all_lons)]])
            
            # Crear grupo de capas para pol칤gonos
            fg_poligonos = folium.FeatureGroup(name="Pol칤gonos RENSPA").add_to(m)
            
            # A침adir cada pol칤gono al mapa
            for pol in st.session_state.poligonos_gee:
                renspa = pol['renspa']
                
                # Informaci칩n b치sica del pol칤gono para popup
                popup_html = f"""
                <div style="width:250px;">
                    <h4>RENSPA: {renspa}</h4>
                    <p><b>Titular:</b> {pol.get('titular', 'No disponible')}</p>
                    <p><b>Localidad:</b> {pol.get('localidad', 'No disponible')}</p>
                    <p><b>Superficie:</b> {pol.get('superficie', 0)} ha</p>
                </div>
                """
                
                # A침adir pol칤gono al mapa
                folium.Polygon(
                    locations=[[coord[1], coord[0]] for coord in pol['coords']],  # Invertir coordenadas para folium
                    color='red',
                    weight=2,
                    fill=True,
                    fill_color='red',
                    fill_opacity=0.3,
                    tooltip=f"RENSPA: {renspa}",
                    popup=folium.Popup(popup_html, max_width=300)
                ).add_to(fg_poligonos)
            
            # A침adir control de capas
            folium.LayerControl(position='topright').add_to(m)
            
            # Mostrar el mapa
            folium_static(m, width=1000, height=600)
            
            # Mostrar bot칩n para an치lisis de cultivos
            st.header("An치lisis de Cultivos")
            
            # Selecci칩n de campa침a
            col1, col2 = st.columns([3, 1])
            
            with col1:
                campana = st.selectbox(
                    "Seleccionar campa침a agr칤cola:",
                    ["Campa침a 2019-2020", "Campa침a 2020-2021", "Campa침a 2021-2022", "Campa침a 2022-2023", "Campa침a 2023-2024"],
                    index=1  # Campa침a 2020-2021 por defecto
                )
            
            with col2:
                # Bot칩n para iniciar an치lisis
                if st.button("Analizar Cultivos con GEE"):
                    # Guardar selecci칩n de campa침a
                    st.session_state.campana_seleccionada = campana
                    
                    # Realizar an치lisis
                    cultivos_por_poligono, df_resumen = analizar_cultivos(
                        st.session_state.poligonos_gee, 
                        campana
                    )
                    
                    # Guardar en estado
                    st.session_state.cultivos_por_poligono = cultivos_por_poligono
                    st.session_state.analisis_cultivos = True
                    
                    # Forzar recarga para mostrar resultados
                    st.experimental_rerun()
        
        # Mostrar mapa con an치lisis de cultivos
        else:
            # Crear mapa con cultivos
            m = crear_mapa_cultivos(
                st.session_state.poligonos_gee, 
                st.session_state.cultivos_por_poligono,
                st.session_state.campana_seleccionada
            )
            
            # Calcular superficie total
            superficie_total = sum(p.get('superficie', 0) for p in st.session_state.poligonos_gee)
            
            # Generar resumen
            df_resumen = generar_resumen_cultivos(
                st.session_state.poligonos_gee, 
                st.session_state.cultivos_por_poligono
            )
            
            # Crear leyenda estilo GEE
            leyenda_html = crear_leyenda_gee_cultivos(
                df_resumen, 
                superficie_total,
                st.session_state.campana_seleccionada
            )
            
            # Mostrar el mapa
            st.subheader(f"An치lisis de Cultivos - {st.session_state.campana_seleccionada}")
            map_container = st.container()
            
            with map_container:
                folium_static(m, width=1000, height=600)
                
                # Mostrar la leyenda estilo GEE
                st.markdown(leyenda_html, unsafe_allow_html=True)
            
            # Mostrar tabla de resumen
            st.subheader("Resumen de Cultivos")
            
            # Agregar columna para formato de presentaci칩n
            df_resumen['Presentaci칩n'] = df_resumen.apply(
                lambda row: f"{int(row['츼rea (ha)'])} Ha ({int(row['Porcentaje (%)'])}%)", 
                axis=1
            )
            
            # Mostrar tabla
            st.dataframe(
                df_resumen[['Cultivo', '츼rea (ha)', 'Porcentaje (%)', 'Presentaci칩n']],
                column_config={
                    "Cultivo": st.column_config.TextColumn("Cultivo"),
                    "츼rea (ha)": st.column_config.NumberColumn("츼rea (ha)", format="%.1f"),
                    "Porcentaje (%)": st.column_config.NumberColumn("Porcentaje (%)", format="%.1f"),
                    "Presentaci칩n": st.column_config.TextColumn("Formato GEE")
                },
                hide_index=True
            )
            
            # Mostrar gr치ficos
            col1, col2 = st.columns(2)
            
            with col1:
                # Gr치fico de barras
                fig1, ax1 = plt.subplots(figsize=(8, 6))
                
                # Diccionario de colores por cultivo
                colores_cultivo = {
                    'Ma칤z': '#0042ff',         # Azul
                    'Soja 1ra': '#339820',     # Verde
                    'CI-Soja 2da': '#90ee90',  # Verde claro
                    'CI-Ma칤z 2da': '#87CEEB',  # Azul claro
                    'Arroz': '#1d1e33',        # Azul oscuro
                    'No agr칤cola': '#646b63',  # Gris
                    'Girasol': '#FFFF00',      # Amarillo
                    'Sorgo GR': '#FF0000',     # Rojo
                    'Algod칩n': '#b7b9bd',      # Gris claro
                    'Default': '#FF0000'       # Rojo (por defecto)
                }
                
                # Obtener colores para el gr치fico
                colores = [colores_cultivo.get(cultivo, '#FF0000') for cultivo in df_resumen['Cultivo']]
                
                # Crear gr치fico de barras
                ax1.bar(df_resumen['Cultivo'], df_resumen['츼rea (ha)'], color=colores)
                ax1.set_ylabel('Hect치reas')
                ax1.set_title(f'Distribuci칩n de Cultivos - {st.session_state.campana_seleccionada}')
                
                # A침adir etiquetas de valor encima de las barras
                for i, v in enumerate(df_resumen['츼rea (ha)']):
                    ax1.text(i, v + 5, f"{int(v)}", ha='center')
                
                plt.xticks(rotation=45, ha='right')
                plt.tight_layout()
                st.pyplot(fig1)
            
            with col2:
                # Gr치fico de torta
                fig2, ax2 = plt.subplots(figsize=(8, 8))
                
                # Crear gr치fico de torta
                wedges, texts, autotexts = ax2.pie(
                    df_resumen['츼rea (ha)'], 
                    labels=df_resumen['Cultivo'], 
                    autopct='%1.1f%%',
                    startangle=90,
                    colors=colores,
                    explode=[0.05 if i == 0 else 0 for i in range(len(df_resumen))]
                )
                
                # Establecer propiedades del texto
                for text in texts:
                    text.set_fontsize(10)
                
                for autotext in autotexts:
                    autotext.set_fontsize(9)
                    autotext.set_color('white')
                
                ax2.axis('equal')  # Para que el gr치fico sea circular
                ax2.set_title(f'Proporci칩n de Cultivos - {st.session_state.campana_seleccionada}')
                
                plt.tight_layout()
                st.pyplot(fig2)
            
            # Bot칩n para cambiar de campa침a
            st.subheader("Cambiar An치lisis")
            
            col1, col2 = st.columns([3, 1])
            
            with col1:
                nueva_campana = st.selectbox(
                    "Seleccionar otra campa침a agr칤cola:",
                    ["Campa침a 2019-2020", "Campa침a 2020-2021", "Campa침a 2021-2022", "Campa침a 2022-2023", "Campa침a 2023-2024"],
                    index=["Campa침a 2019-2020", "Campa침a 2020-2021", "Campa침a 2021-2022", "Campa침a 2022-2023", "Campa침a 2023-2024"].index(st.session_state.campana_seleccionada)
                )
            
            with col2:
                if st.button("Cambiar Campa침a"):
                    # Guardar selecci칩n de campa침a
                    st.session_state.campana_seleccionada = nueva_campana
                    
                    # Realizar an치lisis
                    cultivos_por_poligono, _ = analizar_cultivos(
                        st.session_state.poligonos_gee, 
                        nueva_campana
                    )
                    
                    # Guardar en estado
                    st.session_state.cultivos_por_poligono = cultivos_por_poligono
                    
                    # Forzar recarga para mostrar resultados
                    st.experimental_rerun()
            
            # Opci칩n para volver a la visualizaci칩n b치sica
            if st.button("Volver a Visualizaci칩n B치sica"):
                # Limpiar estado de an치lisis
                st.session_state.analisis_cultivos = False
                st.session_state.cultivos_por_poligono = {}
                
                # Forzar recarga
                st.experimental_rerun()
    
    elif not folium_disponible:
        st.warning("Para visualizar mapas, instale folium y streamlit-folium")
    
    else:
        st.warning("No se encontraron pol칤gonos para visualizar")

# Pie de p치gina
st.sidebar.markdown("---")
st.sidebar.info("Desarrollado para an치lisis agr칤cola en Argentina")
st.sidebar.markdown("Integraci칩n con Google Earth Engine para an치lisis de cultivos")
